datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clipSources   ClipSource[]
  streamers     Streamer[]
  socialAccounts SocialAccount[]
}

model Account {
  id         String   @id @default(cuid())
  userId     String
  accountId  String   @unique
  providerId String
  provider   String   @default("credential")
  type       String?  @default("credential")
  password   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([provider])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  type       String   @db.VarChar(32)

  @@id([identifier, token])
}

model ClipSource {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  page      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Streamer {
  id        String   @id @default(cuid())
  userId    String
  platform  String   // 'twitch', 'youtube', etc.
  username  String
  isLive    Boolean  @default(false)
  lastCheck DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([platform, username])
  @@unique([userId, platform, username])
}

model SocialAccount {
  id        String   @id @default(cuid())
  platform  String   // e.g., "youtube", "tiktok", "instagram", "x"
  username  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, username])
  @@index([userId])
} 